1. Overview
	

2. Server folder
	Folder that contains server-side the node/express application. This part of code handles API requests and communicates with the database to retrieve the information that is needed.
	2.1 API folder
		Three subcategories (API routes, Controllers and Models) are located in this folder. Routes handle the events that come from client based on the relative path of the url. example: /api/medicaments/all is a path that can be handled by the express router.

		2.1.1 API Routes
			Five routes that Routes files match against are:
			GET(one item) {url: www.vetguide.co/api/item/:itemID}
			GET(all items)	{url: www.vetguide.co/api/items}
			CREATE(one item) {url: www.vetguide.co/api/items} 
			UPDATE(one item) {url: www.vetguide.co/api/item/:itemID}
			DELETE(one item) {url: www.vetguide.co/api/item/:itemID}
		2.1.2 API Controllers
			Controllers are functions that are passed to the router and are doing all the work that should be done when the route gets activated.

		2.1.3 API Models
			Models are classes that represent in the code the data that is in the database. 
			{ Medication model }
			{ User model }

	2.2 UTIL folder
		React utilities that are used for asynchronous communication between the server and the client.

	2.3 CONFIG folder
		Passport(authentication) and database(mongodb) configuration. 
		Passport configuration is where we define the strategies of signing up and loging in. (facebook, google, twitter, local login)

	2.4 SERVER.JS file
		File in which all of other files and modules are included and set up to work together in harmony. 
		Server.js is the root file of the web application. Mongoose (mongoDB middleware module), routes objects, and all other modules such as logger for the terminal etc are included. 
		Some error handling is done in this file, as well as a check for the type of environment in which the app is running ( development/production/test ).
	
3. Client folder




// Redux Deo - Mihajlo



Uradjena je reprezentacia objekata medikacije u bazi, domen je spojen sa AWS-om, 
ako bude nekih prethodno nerazjasnjenih krajnjih slucajeva bice promena reprezentacije i controller funkcija u server folderu.


Autentikaciju radi Mihajlo.
U trenutku kada je ona funkcionalna, na AWS se podize funkcionalan cms.
Posto je kada se radi sa Reduxom - posao server developmenta jako spregnut sa frontendom, menjacemo uloge Mihajlo i ja na dalje po potrebi, odnosno
programiracu delove klijenta.


